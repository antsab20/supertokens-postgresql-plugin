/*
 *    Copyright (c) 2024, VRAI Labs and/or its affiliates. All rights reserved.
 *
 *    This software is licensed under the Apache License, Version 2.0 (the
 *    "License") as published by the Apache Software Foundation.
 *
 *    You may not use this file except in compliance with the License. You may
 *    obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *    License for the specific language governing permissions and limitations
 *    under the License.
 */

package io.supertokens.storage.postgresql.migrations;

import io.supertokens.storage.postgresql.MigrationContextManager;
import io.supertokens.storage.postgresql.Start;

import io.supertokens.storage.postgresql.config.Config;
import io.supertokens.storage.postgresql.queries.GeneralQueries;
import io.supertokens.storage.postgresql.utils.Utils;
import org.flywaydb.core.api.migration.BaseJavaMigration;
import org.flywaydb.core.api.migration.Context;

import java.util.Map;

import static io.supertokens.storage.postgresql.config.Config.getConfig;


public class V1__init_database extends BaseJavaMigration {

    @Override
    public void migrate(Context context) throws Exception {
        Map<String, String> ph = context.getConfiguration().getPlaceholders();
        Start start = MigrationContextManager.getContext(ph.get("process_id"));
    }

    public static String getQueryToCreateSessionInfoTable(Start start) {
        String schema = getConfig(start).getTableSchema();
        String sessionInfoTable = getConfig(start).getSessionInfoTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + sessionInfoTable + " ("
                + "session_handle VARCHAR(255) NOT NULL,"
                + "user_id VARCHAR(128) NOT NULL,"
                + "refresh_token_hash_2 VARCHAR(128) NOT NULL,"
                + "session_data TEXT,"
                + "expires_at BIGINT NOT NULL,"
                + "created_at_time BIGINT NOT NULL,"
                + "jwt_user_payload TEXT,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, sessionInfoTable, null, "pkey") + " PRIMARY KEY(session_handle)" + " );";
        // @formatter:on
    }

    static String getQueryToCreateAccessTokenSigningKeysTable(Start start) {
        String schema = getConfig(start).getTableSchema();
        String accessTokenSigningKeysTable = getConfig(start).getAccessTokenSigningKeysTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + accessTokenSigningKeysTable + " ("
                + "created_at_time BIGINT NOT NULL,"
                + "value TEXT,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, accessTokenSigningKeysTable, null, "pkey") + " PRIMARY KEY(created_at_time)" + " );";
        // @formatter:on
    }

    private static String getQueryToCreateKeyValueTable(Start start) {
        String schema = getConfig(start).getTableSchema();
        String keyValueTable = getConfig(start).getKeyValueTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + keyValueTable + " ("
                + "name VARCHAR(128),"
                + "value TEXT,"
                + "created_at_time BIGINT ,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, keyValueTable, null, "pkey") + " PRIMARY KEY(name)" + " );";
        // @formatter:on
    }

    static String getQueryToCreateUsersTable(Start start) {
        String schema = getConfig(start).getTableSchema();
        String usersTable = getConfig(start).getUsersTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + usersTable + " ("
                + "user_id CHAR(36) NOT NULL,"
                + "recipe_id VARCHAR(128) NOT NULL,"
                + "time_joined BIGINT NOT NULL,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, usersTable, null, "pkey") + " PRIMARY KEY (user_id));";
        // @formatter:on
    }

    static String getQueryToCreateJWTSigningTable(Start start) {
        /*
         * created_at should only be used to determine the key that was added to the database last, it should not be
         * used to determine the validity or lifetime of a key. While the assumption that created_at refers to the time
         * the key was generated holds true for keys generated by the core, it is not guaranteed when we allow user
         * defined
         * keys in the future.
         */
        String schema = getConfig(start).getTableSchema();
        String jwtSigningKeysTable = getConfig(start).getJWTSigningKeysTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + jwtSigningKeysTable + " ("
                + "key_id VARCHAR(255) NOT NULL,"
                + "key_string TEXT NOT NULL,"
                + "algorithm VARCHAR(10) NOT NULL,"
                + "created_at BIGINT,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, jwtSigningKeysTable, null, "pkey") + " PRIMARY KEY(key_id));";
        // @formatter:on
    }

    static String getQueryToCreateEmailVerificationTable(Start start) {
        String schema = getConfig(start).getTableSchema();
        String emailVerificationTable = getConfig(start).getEmailVerificationTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + emailVerificationTable + " ("
                + "user_id VARCHAR(128) NOT NULL,"
                + "email VARCHAR(256) NOT NULL,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, emailVerificationTable, null, "pkey") + " PRIMARY KEY (user_id, email));";
        // @formatter:on
    }

    static String getQueryToCreateEmailVerificationTokensTable(Start start) {
        String schema = getConfig(start).getTableSchema();
        String emailVerificationTokensTable = getConfig(start).getEmailVerificationTokensTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + emailVerificationTokensTable + " ("
                + "user_id VARCHAR(128) NOT NULL,"
                + "email VARCHAR(256) NOT NULL,"
                + "token VARCHAR(128) NOT NULL CONSTRAINT " + Utils.getConstraintName(schema, emailVerificationTokensTable, "token", "key") + " UNIQUE,"
                + "token_expiry BIGINT NOT NULL,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, emailVerificationTokensTable, null, "pkey") + " PRIMARY KEY (user_id, email, token))";
        // @formatter:on
    }

    static String getQueryToEmailPasswordUsersTable(Start start) {
        String schema = getConfig(start).getTableSchema();
        String emailPasswordUsersTable = getConfig(start).getEmailPasswordUsersTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + emailPasswordUsersTable + " ("
                + "user_id CHAR(36) NOT NULL,"
                + "email VARCHAR(256) NOT NULL CONSTRAINT " + Utils.getConstraintName(schema, emailPasswordUsersTable, "email", "key") + " UNIQUE,"
                + "password_hash VARCHAR(128) NOT NULL," + "time_joined BIGINT NOT NULL,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, emailPasswordUsersTable, null, "pkey") + " PRIMARY KEY (user_id));";
        // @formatter:on
    }

    static String getQueryToCreatePasswordResetTokensTable(Start start) {
        String schema = getConfig(start).getTableSchema();
        String passwordResetTokensTable = getConfig(start).getPasswordResetTokensTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + passwordResetTokensTable + " ("
                + "user_id CHAR(36) NOT NULL,"
                + "token VARCHAR(128) NOT NULL CONSTRAINT " + Utils.getConstraintName(schema, passwordResetTokensTable, "token", "key") + " UNIQUE,"
                + "token_expiry BIGINT NOT NULL,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, passwordResetTokensTable, null, "pkey") + " PRIMARY KEY (user_id, token),"
                + ("CONSTRAINT " + Utils.getConstraintName(schema, passwordResetTokensTable, "user_id", "fkey") + " FOREIGN KEY (user_id)"
                + " REFERENCES " + getConfig(start).getEmailPasswordUsersTable() + "(user_id)"
                + " ON DELETE CASCADE ON UPDATE CASCADE);");
        // @formatter:on
    }

    public static String getQueryToCreatePasswordlessUsersTable(Start start) {
        String schema = getConfig(start).getTableSchema();
        String usersTable = getConfig(start).getPasswordlessUsersTable();

        return "CREATE TABLE IF NOT EXISTS " + usersTable + " (" + "user_id CHAR(36) NOT NULL,"
                + "email VARCHAR(256) CONSTRAINT " + Utils.getConstraintName(schema, usersTable, "email", "key")
                + " UNIQUE," + "phone_number VARCHAR(256) CONSTRAINT "
                + Utils.getConstraintName(schema, usersTable, "phone_number", "key") + " UNIQUE,"
                + "time_joined BIGINT NOT NULL, " + "CONSTRAINT "
                + Utils.getConstraintName(schema, usersTable, null, "pkey") + " PRIMARY KEY (user_id)" + ");";
    }

    public static String getQueryToCreateDevicesTable(Start start) {
        String schema = getConfig(start).getTableSchema();
        String devicesTable = getConfig(start).getPasswordlessDevicesTable();

        return "CREATE TABLE IF NOT EXISTS " + devicesTable + " (" + "device_id_hash CHAR(44) NOT NULL,"
                + "email VARCHAR(256), " + "phone_number VARCHAR(256)," + "link_code_salt CHAR(44) NOT NULL,"
                + "failed_attempts INT NOT NULL," + "CONSTRAINT "
                + Utils.getConstraintName(schema, devicesTable, null, "pkey") + " PRIMARY KEY (device_id_hash));";
    }

    public static String getQueryToCreateCodesTable(Start start) {
        String schema = getConfig(start).getTableSchema();
        String codesTable = getConfig(start).getPasswordlessCodesTable();

        return "CREATE TABLE IF NOT EXISTS " + codesTable + " (" + "code_id CHAR(36) NOT NULL,"
                + "device_id_hash CHAR(44) NOT NULL," + "link_code_hash CHAR(44) NOT NULL CONSTRAINT "
                + Utils.getConstraintName(schema, codesTable, "link_code_hash", "key") + " UNIQUE,"
                + "created_at BIGINT NOT NULL," + "CONSTRAINT "
                + Utils.getConstraintName(schema, codesTable, null, "pkey") + " PRIMARY KEY (code_id)," + "CONSTRAINT "
                + Utils.getConstraintName(schema, codesTable, "device_id_hash", "fkey")
                + " FOREIGN KEY (device_id_hash) " + "REFERENCES "
                + getConfig(start).getPasswordlessDevicesTable()
                + "(device_id_hash) ON DELETE CASCADE ON UPDATE CASCADE);";
    }

    static String getQueryToCreateThirdPartyUsersTable(Start start) {
        String schema = getConfig(start).getTableSchema();
        String thirdPartyUsersTable = getConfig(start).getThirdPartyUsersTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + thirdPartyUsersTable + " ("
                + "third_party_id VARCHAR(28) NOT NULL,"
                + "third_party_user_id VARCHAR(128) NOT NULL,"
                + "user_id CHAR(36) NOT NULL CONSTRAINT " + Utils.getConstraintName(schema, thirdPartyUsersTable, "user_id", "key") + " UNIQUE,"
                + "email VARCHAR(256) NOT NULL,"
                + "time_joined BIGINT NOT NULL,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, thirdPartyUsersTable, null, "pkey") + " PRIMARY KEY (third_party_id, third_party_user_id));";
        // @formatter:on
    }

    public static String getQueryToCreateUserIdMappingTable(Start start) {
        String schema = getConfig(start).getTableSchema();
        String userIdMappingTable = getConfig(start).getUserIdMappingTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + userIdMappingTable + " ("
                + "supertokens_user_id CHAR(36) NOT NULL "
                + "CONSTRAINT " + Utils.getConstraintName(schema, userIdMappingTable, "supertokens_user_id", "key") + " UNIQUE,"
                + "external_user_id VARCHAR(128) NOT NULL"
                + " CONSTRAINT " + Utils.getConstraintName(schema, userIdMappingTable, "external_user_id", "key") + " UNIQUE,"
                + "external_user_id_info TEXT,"
                + " CONSTRAINT " + Utils.getConstraintName(schema, userIdMappingTable, null, "pkey") +
                " PRIMARY KEY(supertokens_user_id, external_user_id),"
                + ("CONSTRAINT " + Utils.getConstraintName(schema, userIdMappingTable, "supertokens_user_id", "fkey") +
                " FOREIGN KEY (supertokens_user_id)"
                + " REFERENCES " + getConfig(start).getUsersTable() + "(user_id)"
                + " ON DELETE CASCADE);");
        // @formatter:on
    }

    public static String getQueryToCreateRolesTable(Start start) {
        String schema = getConfig(start).getTableSchema();
        String tableName = getConfig(start).getRolesTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + tableName + " ("
                + "role VARCHAR(255) NOT NULL,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, tableName, null, "pkey") + " PRIMARY KEY(role)" + " );";

        // @formatter:on
    }

    public static String getQueryToCreateRolePermissionsTable(Start start) {
        String tableName = getConfig(start).getUserRolesPermissionsTable();
        String schema = getConfig(start).getTableSchema();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + tableName + " ("
                + "role VARCHAR(255) NOT NULL,"
                + "permission VARCHAR(255) NOT NULL,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, tableName, null, "pkey") + " PRIMARY KEY(role, permission),"
                + "CONSTRAINT " + Utils.getConstraintName(schema, tableName, "role", "fkey") + " FOREIGN KEY(role)"
                + " REFERENCES " + getConfig(start).getRolesTable()
                +"(role) ON DELETE CASCADE );";

        // @formatter:on
    }

    public static String getQueryToCreateUserRolesTable(Start start) {
        String schema = Config.getConfig(start).getTableSchema();
        String tableName = getConfig(start).getUserRolesTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + tableName + " ("
                + "user_id VARCHAR(128) NOT NULL,"
                + "role VARCHAR(255) NOT NULL,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, tableName, null, "pkey") + " PRIMARY KEY(user_id, role),"
                + "CONSTRAINT " + Utils.getConstraintName(schema, tableName, "role", "fkey") + " FOREIGN KEY(role)"
                + " REFERENCES " + getConfig(start).getRolesTable()
                +"(role) ON DELETE CASCADE );";

        // @formatter:on
    }

    public static String getQueryToCreateUserMetadataTable(Start start) {
        String schema = Config.getConfig(start).getTableSchema();
        String tableName = Config.getConfig(start).getUserMetadataTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + tableName + " ("
                + "user_id VARCHAR(128) NOT NULL,"
                + "user_metadata TEXT NOT NULL,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, tableName, null, "pkey") + " PRIMARY KEY(user_id)" + " );";
        // @formatter:on

    }

    public static String getQueryToCreateDashboardUsersTable(Start start) {
        String schema = Config.getConfig(start).getTableSchema();
        String dashboardUsersTable = Config.getConfig(start).getDashboardUsersTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + dashboardUsersTable + " ("
                + "user_id CHAR(36) NOT NULL,"
                + "email VARCHAR(256) NOT NULL CONSTRAINT " +
                Utils.getConstraintName(schema, dashboardUsersTable, "email", "key") + " UNIQUE,"
                + "password_hash VARCHAR(256) NOT NULL," + "time_joined BIGINT NOT NULL,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, dashboardUsersTable, null, "pkey") +
                " PRIMARY KEY (user_id));";
        // @formatter:on
    }


    public static String getQueryToCreateDashboardUserSessionsTable(Start start) {
        String schema = Config.getConfig(start).getTableSchema();
        String tableName = Config.getConfig(start).getDashboardSessionsTable();
        // @formatter:off
        return "CREATE TABLE IF NOT EXISTS " + tableName + " ("
                + "session_id CHAR(36) NOT NULL,"
                + "user_id CHAR(36) NOT NULL,"
                + "time_created BIGINT NOT NULL,"
                + "expiry BIGINT NOT NULL,"
                + "CONSTRAINT " + Utils.getConstraintName(schema, tableName, null, "pkey") + " PRIMARY KEY(session_id),"
                + ("CONSTRAINT " + Utils.getConstraintName(schema, tableName, "user_id", "fkey") + " FOREIGN KEY (user_id)"
                + " REFERENCES " + Config.getConfig(start).getDashboardUsersTable() + "(user_id)"
                + " ON DELETE CASCADE ON UPDATE CASCADE);");
        // @formatter:on
    }

    public static String getQueryToCreateoTotpUsersTablee(Start start) {
        return "CREATE TABLE IF NOT EXISTS " + Config.getConfig(start).getTotpUsersTable() + " ("
                + "user_id VARCHAR(128) NOT NULL,"
                + "PRIMARY KEY (user_id))";
    }

    public static String getQueryToCreateUserDevicesTable(Start start) {
        return "CREATE TABLE IF NOT EXISTS " + Config.getConfig(start).getTotpUserDevicesTable() + " ("
                + "user_id VARCHAR(128) NOT NULL," + "device_name VARCHAR(256) NOT NULL,"
                + "secret_key VARCHAR(256) NOT NULL,"
                + "period INTEGER NOT NULL," + "skew INTEGER NOT NULL," + "verified BOOLEAN NOT NULL,"
                + "PRIMARY KEY (user_id, device_name),"
                + "FOREIGN KEY (user_id) REFERENCES "
                + Config.getConfig(start).getTotpUsersTable() + "(user_id) ON DELETE CASCADE);";
    }

    public static String getQueryToCreateUsedCodesTable(Start start) {
        return "CREATE TABLE IF NOT EXISTS " + Config.getConfig(start).getTotpUsedCodesTable() + " ("
                + "user_id VARCHAR(128) NOT NULL, "
                + "code VARCHAR(8) NOT NULL," + "is_valid BOOLEAN NOT NULL,"
                + "expiry_time_ms BIGINT NOT NULL,"
                + "created_time_ms BIGINT NOT NULL,"
                + "PRIMARY KEY (user_id, created_time_ms),"
                + "FOREIGN KEY (user_id) REFERENCES "
                + Config.getConfig(start).getTotpUsersTable() + "(user_id) ON DELETE CASCADE);";
    }

    static String getQueryToCreateUserLastActiveTable(Start start) {
        return "CREATE TABLE IF NOT EXISTS " + Config.getConfig(start).getUserLastActiveTable() + " ("
                + "user_id VARCHAR(128),"
                + "last_active_time BIGINT," + "PRIMARY KEY(user_id)" + " );";
    }
}
